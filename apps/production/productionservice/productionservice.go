// Code generated by goctl. DO NOT EDIT.
// Source: production.proto

package productionservice

import (
	"context"

	"github.com/v3nooonn/trytry/apps/production/pb/production"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CarInfoReq  = production.CarInfoReq
	CarInfoResp = production.CarInfoResp
	ProdView    = production.ProdView
	ViewsReq    = production.ViewsReq
	ViewsResp   = production.ViewsResp

	ProductionService interface {
		Views(ctx context.Context, in *ViewsReq, opts ...grpc.CallOption) (*ViewsResp, error)
		CarInfo(ctx context.Context, in *CarInfoReq, opts ...grpc.CallOption) (*CarInfoResp, error)
	}

	defaultProductionService struct {
		cli zrpc.Client
	}
)

func NewProductionService(cli zrpc.Client) ProductionService {
	return &defaultProductionService{
		cli: cli,
	}
}

func (m *defaultProductionService) Views(ctx context.Context, in *ViewsReq, opts ...grpc.CallOption) (*ViewsResp, error) {
	client := production.NewProductionServiceClient(m.cli.Conn())
	return client.Views(ctx, in, opts...)
}

func (m *defaultProductionService) CarInfo(ctx context.Context, in *CarInfoReq, opts ...grpc.CallOption) (*CarInfoResp, error) {
	client := production.NewProductionServiceClient(m.cli.Conn())
	return client.CarInfo(ctx, in, opts...)
}
