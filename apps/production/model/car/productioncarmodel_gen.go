// Code generated by goctl. DO NOT EDIT!

package car

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productionCarFieldNames          = builder.RawFieldNames(&ProductionCar{})
	productionCarRows                = strings.Join(productionCarFieldNames, ",")
	productionCarRowsExpectAutoSet   = strings.Join(stringx.Remove(productionCarFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	productionCarRowsWithPlaceHolder = strings.Join(stringx.Remove(productionCarFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	productionCarModel interface {
		Insert(ctx context.Context, data *ProductionCar) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductionCar, error)
		Update(ctx context.Context, data *ProductionCar) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductionCarModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductionCar struct {
		Id        int64     `db:"id"`
		Brand     string    `db:"brand"`
		Serie     string    `db:"serie"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newProductionCarModel(conn sqlx.SqlConn) *defaultProductionCarModel {
	return &defaultProductionCarModel{
		conn:  conn,
		table: "`production_car`",
	}
}

func (m *defaultProductionCarModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductionCarModel) FindOne(ctx context.Context, id int64) (*ProductionCar, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productionCarRows, m.table)
	var resp ProductionCar
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductionCarModel) Insert(ctx context.Context, data *ProductionCar) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, productionCarRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Brand, data.Serie, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultProductionCarModel) Update(ctx context.Context, data *ProductionCar) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productionCarRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Brand, data.Serie, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultProductionCarModel) tableName() string {
	return m.table
}
