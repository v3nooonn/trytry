// Code generated by goctl. DO NOT EDIT!

package brand

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productionBrandFieldNames          = builder.RawFieldNames(&ProductionBrand{})
	productionBrandRows                = strings.Join(productionBrandFieldNames, ",")
	productionBrandRowsExpectAutoSet   = strings.Join(stringx.Remove(productionBrandFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	productionBrandRowsWithPlaceHolder = strings.Join(stringx.Remove(productionBrandFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	productionBrandModel interface {
		Insert(ctx context.Context, data *ProductionBrand) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductionBrand, error)
		Update(ctx context.Context, data *ProductionBrand) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductionBrandModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductionBrand struct {
		Id        int64     `db:"id"`
		Category  int64     `db:"category"`
		Name      string    `db:"name"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newProductionBrandModel(conn sqlx.SqlConn) *defaultProductionBrandModel {
	return &defaultProductionBrandModel{
		conn:  conn,
		table: "`production_brand`",
	}
}

func (m *defaultProductionBrandModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductionBrandModel) FindOne(ctx context.Context, id int64) (*ProductionBrand, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productionBrandRows, m.table)
	var resp ProductionBrand
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductionBrandModel) Insert(ctx context.Context, data *ProductionBrand) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, productionBrandRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Category, data.Name, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultProductionBrandModel) Update(ctx context.Context, data *ProductionBrand) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productionBrandRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Category, data.Name, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultProductionBrandModel) tableName() string {
	return m.table
}
