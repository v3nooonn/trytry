// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package production

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductionServiceClient is the client API for ProductionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionServiceClient interface {
	Views(ctx context.Context, in *ViewsReq, opts ...grpc.CallOption) (*ViewsResp, error)
	CarInfo(ctx context.Context, in *CarInfoReq, opts ...grpc.CallOption) (*CarInfoResp, error)
}

type productionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductionServiceClient(cc grpc.ClientConnInterface) ProductionServiceClient {
	return &productionServiceClient{cc}
}

func (c *productionServiceClient) Views(ctx context.Context, in *ViewsReq, opts ...grpc.CallOption) (*ViewsResp, error) {
	out := new(ViewsResp)
	err := c.cc.Invoke(ctx, "/production.ProductionService/Views", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionServiceClient) CarInfo(ctx context.Context, in *CarInfoReq, opts ...grpc.CallOption) (*CarInfoResp, error) {
	out := new(CarInfoResp)
	err := c.cc.Invoke(ctx, "/production.ProductionService/CarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductionServiceServer is the server API for ProductionService service.
// All implementations must embed UnimplementedProductionServiceServer
// for forward compatibility
type ProductionServiceServer interface {
	Views(context.Context, *ViewsReq) (*ViewsResp, error)
	CarInfo(context.Context, *CarInfoReq) (*CarInfoResp, error)
	mustEmbedUnimplementedProductionServiceServer()
}

// UnimplementedProductionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductionServiceServer struct {
}

func (UnimplementedProductionServiceServer) Views(context.Context, *ViewsReq) (*ViewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Views not implemented")
}
func (UnimplementedProductionServiceServer) CarInfo(context.Context, *CarInfoReq) (*CarInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarInfo not implemented")
}
func (UnimplementedProductionServiceServer) mustEmbedUnimplementedProductionServiceServer() {}

// UnsafeProductionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionServiceServer will
// result in compilation errors.
type UnsafeProductionServiceServer interface {
	mustEmbedUnimplementedProductionServiceServer()
}

func RegisterProductionServiceServer(s grpc.ServiceRegistrar, srv ProductionServiceServer) {
	s.RegisterService(&ProductionService_ServiceDesc, srv)
}

func _ProductionService_Views_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionServiceServer).Views(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/production.ProductionService/Views",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionServiceServer).Views(ctx, req.(*ViewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionService_CarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionServiceServer).CarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/production.ProductionService/CarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionServiceServer).CarInfo(ctx, req.(*CarInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductionService_ServiceDesc is the grpc.ServiceDesc for ProductionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "production.ProductionService",
	HandlerType: (*ProductionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Views",
			Handler:    _ProductionService_Views_Handler,
		},
		{
			MethodName: "CarInfo",
			Handler:    _ProductionService_CarInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/production.proto",
}
