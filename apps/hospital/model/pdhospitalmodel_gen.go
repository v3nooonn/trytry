// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pdHospitalFieldNames          = builder.RawFieldNames(&PdHospital{}, true)
	pdHospitalRows                = strings.Join(pdHospitalFieldNames, ",")
	pdHospitalRowsExpectAutoSet   = strings.Join(stringx.Remove(pdHospitalFieldNames, "id", "create_time", "update_time", "create_at", "update_at"), ",")
	pdHospitalRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(pdHospitalFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))

	cacheHospitalV1nPdHospitalIdPrefix = "cache:hospitalV1n:pdHospital:id:"
)

type (
	pdHospitalModel interface {
		Insert(ctx context.Context, data *PdHospital) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PdHospital, error)
		Update(ctx context.Context, data *PdHospital) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPdHospitalModel struct {
		sqlc.CachedConn
		table string
	}

	PdHospital struct {
		Id      int64     `db:"id"`
		Name    string    `db:"name"`
		Logo    string    `db:"logo"`
		Welfare bool      `db:"welfare"`
		TDate   time.Time `db:"t_date"`
	}
)

func newPdHospitalModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPdHospitalModel {
	return &defaultPdHospitalModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"hospital_v1n"."pd_hospital"`,
	}
}

func (m *defaultPdHospitalModel) Delete(ctx context.Context, id int64) error {
	hospitalV1nPdHospitalIdKey := fmt.Sprintf("%s%v", cacheHospitalV1nPdHospitalIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hospitalV1nPdHospitalIdKey)
	return err
}

func (m *defaultPdHospitalModel) FindOne(ctx context.Context, id int64) (*PdHospital, error) {
	hospitalV1nPdHospitalIdKey := fmt.Sprintf("%s%v", cacheHospitalV1nPdHospitalIdPrefix, id)
	var resp PdHospital
	err := m.QueryRowCtx(ctx, &resp, hospitalV1nPdHospitalIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", pdHospitalRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPdHospitalModel) Insert(ctx context.Context, data *PdHospital) (sql.Result, error) {
	hospitalV1nPdHospitalIdKey := fmt.Sprintf("%s%v", cacheHospitalV1nPdHospitalIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, pdHospitalRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Logo, data.Welfare, data.TDate)
	}, hospitalV1nPdHospitalIdKey)
	return ret, err
}

func (m *defaultPdHospitalModel) Update(ctx context.Context, data *PdHospital) error {
	hospitalV1nPdHospitalIdKey := fmt.Sprintf("%s%v", cacheHospitalV1nPdHospitalIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, pdHospitalRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Logo, data.Welfare, data.TDate)
	}, hospitalV1nPdHospitalIdKey)
	return err
}

func (m *defaultPdHospitalModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheHospitalV1nPdHospitalIdPrefix, primary)
}

func (m *defaultPdHospitalModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", pdHospitalRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPdHospitalModel) tableName() string {
	return m.table
}
