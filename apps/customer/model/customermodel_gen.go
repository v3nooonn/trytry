// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerFieldNames          = builder.RawFieldNames(&Customer{})
	customerRows                = strings.Join(customerFieldNames, ",")
	customerRowsExpectAutoSet   = strings.Join(stringx.Remove(customerFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	customerRowsWithPlaceHolder = strings.Join(stringx.Remove(customerFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTrytryCustomerIdPrefix = "cache:trytry:customer:id:"
)

type (
	customerModel interface {
		Insert(ctx context.Context, data *Customer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Customer, error)
		Update(ctx context.Context, data *Customer) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCustomerModel struct {
		sqlc.CachedConn
		table string
	}

	Customer struct {
		Id        int64     `db:"id"`
		Name      string    `db:"name"`
		Male      int64     `db:"male"`
		Email     string    `db:"email"`
		Secret    string    `db:"secret"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newCustomerModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCustomerModel {
	return &defaultCustomerModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`customer`",
	}
}

func (m *defaultCustomerModel) Delete(ctx context.Context, id int64) error {
	trytryCustomerIdKey := fmt.Sprintf("%s%v", cacheTrytryCustomerIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, trytryCustomerIdKey)
	return err
}

func (m *defaultCustomerModel) FindOne(ctx context.Context, id int64) (*Customer, error) {
	trytryCustomerIdKey := fmt.Sprintf("%s%v", cacheTrytryCustomerIdPrefix, id)
	var resp Customer
	err := m.QueryRowCtx(ctx, &resp, trytryCustomerIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerModel) Insert(ctx context.Context, data *Customer) (sql.Result, error) {
	trytryCustomerIdKey := fmt.Sprintf("%s%v", cacheTrytryCustomerIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, customerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Male, data.Email, data.Secret, data.CreatedAt, data.UpdatedAt)
	}, trytryCustomerIdKey)
	return ret, err
}

func (m *defaultCustomerModel) Update(ctx context.Context, data *Customer) error {
	trytryCustomerIdKey := fmt.Sprintf("%s%v", cacheTrytryCustomerIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Male, data.Email, data.Secret, data.CreatedAt, data.UpdatedAt, data.Id)
	}, trytryCustomerIdKey)
	return err
}

func (m *defaultCustomerModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTrytryCustomerIdPrefix, primary)
}

func (m *defaultCustomerModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCustomerModel) tableName() string {
	return m.table
}
